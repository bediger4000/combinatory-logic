# Classic Church Numerals
#define zero %a.%b.b
define c0 (K I)
#define succ %a.%b.%c.b (a b c)
define succ (S B)
#define plus %d.%e.%f.%g.d f (e f g)
define plus (B S (B B))
#define pred %n.%f.%x.n(%g.%h.h (g f))(%u.x)(%u.u)
def pred ((C ((B C) ((B (B C)) ((C ((B C) ((B (B B)) ((C B) ((B (B (C I))) (C I)))))) K)))) I)
#define True %a.%b.a
define True K
#define F %a.%b.b
define F (K I)
#define ifthenelse %p.%x.%y.p x y
define ifthenelse I

ifthenelse True true false
ifthenelse F true false

#define zerop %n.n(%x.F) True
#define zerop %n.(n(%x.%a.%b.b) (%a.%b.a))
define zerop ((C ((C I) (K (K I)))) K)

#define Y (S (C B (S I I)) (C B (S I I)))
#define Y (S S K (S (K (S S (S (S S K)))) K))
define Y (((S C) I) ((S B) ((C ((B S) (C I))) I)))

#define R %n.%o.%p.((ifthenelse) (zerop o) (p) ((n (pred o)) (succ p)))
#define R %n.%o.%p.((%p.%x.%y.p x y)((%n.(n(%x.%a.%b.b) (%a.%b.a))) o) p (n ((%n.%f.%x.(((n %g.%h.(h (g f))) %u.x) %u.u)) o) ((%a.%b.%c.b (a b c)) p)))

define R ((B (S ((B S) ((B I) ((C ((C I) (K (K I)))) K))))) ((C ((B C) ((B (B B)) ((C B) ((C ((B C) ((B (B C)) ((C ((B C) ((B (B B)) ((C B) ((B (B (C I))) (C I)))))) K)))) I))))) (S B)))

define add (Y R)

def c2 (succ (succ c0))
def c1 (succ c0)
def c3 (succ c2)
def c4 (c2 c2)

(zerop c0) c0IsZero c0IsNotZero
(zerop c1) c1IsZero c1IsNotZero
(zerop c2) c2IsZero c2IsNotZero
(zerop c4) c4IsZero c4IsNotZero
(zerop (pred c1)) Predc1IsZero Predc1IsNotZero
(zerop (pred c0)) Predc0IsZero Predc0IsNotZero
(zerop (pred (pred c0))) PredPredc0IsZero PredPredc0IsNotZero
(zerop (pred (pred (pred c0)))) PredPredPredc0IsZero PredPredPredc0IsNotZero
add c0 c0 f n  # n
add c0 c1 f n  # f n
add c0 c2 f n  # f (f n)
add c1 c1 f n  # f (f n)
add c2 c1 f n  # f (f (f n))
c2 c2 f n      # f f f f n
def ackermann ((S ((C ((C I) ((S B) ((C ((B C) (C I))) I)))) (S B))) I)
ackermann c2 f n
ackermann c3 f n
add c4 c4 f n
